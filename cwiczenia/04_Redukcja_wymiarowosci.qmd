---
title: "Eksploracja danych geoprzestrzennych"
subtitle: "Redukcja wymiarowości"
author: "Krzysztof Dyba"
format:
  html:
    toc: true
    toc-title: " "
    embed-resources: true
    code-links:
      - text: Repozytorium
        icon: github
        href: https://github.com/kadyb/edg2025
---

# Wprowadzenie

W rzeczywistych zbiorach danych często spotykamy się z istotnie dużą liczbą
zmiennych (cech), które opisują pewne obserwacje (obiekty). Jest to tak zwane
zjawisko wielowymiarowości danych (*high dimensionality*). W praktyce, powoduje
to problemy związane z ilością wymaganej pamięci do przetwarzania danych, dłuższym
czasem obliczeń, trudnościami w interpretacji zależności i ich wizualizacją w
przestrzeni dwuwymiarowej, a także zmniejszenie skuteczności modelu wraz ze
wzrostem liczby zmiennych (w takiej sytuacji model zazwyczaj słabo generalizuje
zależności).

Rozwiązaniem może być zastosowanie metody opartej na **analizie głównych składowych**
(*principal component analysis*, PCA), która jest najczęściej stosowanym podejściem
do redukcji wymiarowości. Przekształca ona zbiór danych ze skorelowanymi zmiennymi
w nowy zbiór nieskorelowanych (ortogonalnych) zmiennych nazywanymi głównymi
składowymi (*principal components*), zachowując przy tym jak najwięcej zmienności
(informacji). Główne składowe są liniowymi kombinacjami oryginalnych zmiennych,
uporządkowanymi według ilości wariancji, którą wyjaśniają. Oznacza to, że pierwsza
główna składowa (PC1) wyjaśnia największą zmienność (wariancję), a każda kolejna
składowa (PC2, PC3, itd.) mniej.

Analiza głównych składowych umożliwia przede wszystkim zmniejszenie liczby
zmiennych w zbiorze danych i usunięcie współliniowości między nimi. Oprócz tego,
przydatna jest do wizualizacji danych wielowymiarowych w dwóch wymiarach
wykorzystując najczęściej dwie najistotniejsze główne składowe (PC1 i PC2).

Technika ta wymaga spełnienia kilku założeń:

1. Relacje między zmiennymi są liniowe.
2. Zmienne są typu numerycznego.
3. Wszystkie obserwacje mają wartości (brak `NA` w zbiorze danych).
4. Zmienne powinny mieć rozkład zbliżony do normalnego i brak wartości odstających.
5. Zmienne muszą posiadać jednakowe skale (wymagana standaryzacja).

Niemniej, nie jest to jedyne podejście do redukcji wymiarowości. Wyróżnić
można także skalowanie wielowymiarowe (*multidimensional scaling*), autoenkodery
oparte o sieci neuronowe czy techniki służące wyłącznie do wizualizacji *t-SNE*
i *UMAP*.

## Wariancja

Przed przystąpieniem do analizy, należy wytłumaczyć czym jest właściwie wariancja.
Jest to miara statystyczna, która opisuje ilościowo zróżnicowanie (rozrzut)
wartości w zbiorze danych, określając jak bardzo odbiegają od wartości średniej
tego zbioru. Wysoka wariancja wskazuje, że punkty są rozproszone, podczas gdy
niska wariancja oznacza, że są one skupione blisko średniej. Zerowa wariancja
oznacza, że wszystkie wartości są identyczne (brak zmienności).

```r
# wariancja dla próby
sum((x - mean(x))^2 / (length(x) - 1))
```

Pamiętaj, że wariancja jest wyrażona w jednostkach kwadratowych ($j^2$)
oryginalnych danych, co może sprawić, że interpretacja będzie mniej intuicyjna.
Z tego powodu często preferowane jest odchylenie standardowe, tj. pierwiastek
kwadratowy z wariancji.

Analiza głównych składowych zakłada, że główne składowe o największej wariancji
zawierają najważniejsze informacje. Jeśli główna składowa nie wykazuje prawie
żadnej wariancji, to ma ona niewielki wkład w reprezentację zbioru danych i można
ją pominąć.

# Analiza danych tabelarycznych

```{r}
#| message: false
library("corrplot")
```

## Przygotowanie danych

Analizę przeprowadzimy na przykładzie danych społeczno-ekonomicznych z
[World Bank Data](https://data.worldbank.org/). Dla uproszczenia przyjmijmy,
że interesują nas wyłącznie kraje europejskie.

```{r}
# wczytanie danych w formacie .csv
data = read.csv2("../dane/world_bank_data.csv")
# selekcja krajów europejskich
data = data[data$region == "EU" & !is.na(data$region), ]
# wyświetlenie struktury danych
str(data)
```

Jak możemy zauważyć powyżej, w naszej ramce danych mamy liczne wartości brakujące
`NA` (w szczególności w kolumnie `literacy`), co uniemożliwi nam wykonanie
analizy głównych składowych. Zatem musimy je usunąć.

```{r}
# usuń całą kolumnę
data$literacy = NULL
```

```{r}
# usuń wiersze z brakującymi wartościami
idx = complete.cases(data)
data = data[idx, ]
```

Poglądowo sprawdźmy również ogólną korelację liniową pomiędzy zmiennymi.

```{r}
# macierz korelacji
cor_mat = cor(data[, 4:11], method = "pearson")
corrplot(cor_mat, method = "number", type = "lower", diag = FALSE)
```

Najsilniejsza korelacja występuję pomiędzy całkowitą populacją kraju a produktem
krajowym brutto (PKB). Wynika to z prostego związku, iż PKB mierzy wartość
wszystkich dóbr i usług wytworzonych w gospodarce w danym okresie, a większa liczba
ludności zwiększa produkcję oraz konsumpcję. Kolejna silna zależność występuje
pomiędzy produktem krajowym brutto na osobę a dostępem do internetu i spodziewaną
długością życia. Pozostałe zmienne nie wykazuje aż tak silnych zależności.

Analiza głównych składowych jest wrażliwa na skalę zmiennych, dlatego ważne
jest uprzednie ustandaryzowanie danych, tj. wyśrodkowanie (poprzez odjęcie
średniej) i przeskalowanie (poprzez podzielenie przez odchylenie standardowe).
Zapewnia to, że zmienne o większej skali nie zdominują pozostałych zmiennych.
Do standaryzacji danych służy funkcja `scale()`.

```{r}
# skalowanie danych
data_scale = scale(data[4:11])
```

Po tej operacji średnia wartość każdej zmiennej wynosi 0, a odchylenie standardowe
jest równe 1.

## Analiza głównych składowych

Do analizy głównych składowych można wykorzystać między innymi funkcję `prcomp()`.
Jeśli dokonaliśmy wcześniej standaryzacji danych, to koniecznie musimy nadać
argumentom `scale.` i `center` wartość `FALSE`, aby uniknąć podwójnej standaryzacji.

```{r}
pca = prcomp(data_scale, scale. = FALSE, center = FALSE)
summary(pca)
```

W podsumowaniu wyników otrzymujemy:

- Odchylenie standardowe (*Standard deviation*) -- wskazuje istotność każdej
głównej składowej (im większa wartość, tym większa istotność).
- Proporcja wariancji (*Proportion of Variance*) -- proporcja całkowitej
wariancji wyjaśniona przez każdą główną składową.
- Proporcja skumulowana (*Cumulative Proportion*) -- skumulowana część wariancji
wyjaśniona przez pierwsze $k$ głównych składowych.

Dodatkowo, otrzymaliśmy dwa obiekty `rotation` i `x`. Ten pierwszy reprezentuje
macierz ładunków (*loadings*), natomiast drugi zawiera nowe wartości obserwacji
po transformacji rzutowane na główne składowe (można je później wykorzystać
do modelowania).

```{r}
# macierz ładunków PC1 i PC2
pca$rotation[, 1:2]
```

Ładunki informują, w jakim stopniu każda zmienna wejściowa ma wpływ na każdą
główną składową, tzn. wysoka wartość ładunku w pierwszej składowej głównej
oznacza, że jest silnie skorelowana z tą składową. Natomiast znak wskazuje
kierunek zależności.

Dla przykładu, zmienne `life_exp`, `gdp` oraz `gdp_pc` mają wysoki dodatni
ładunek na pierwszej składowej (PC1), oznacza to, że ta składowa jest silnie
zależna od tych zmiennych. Zobaczymy jak wygląda zależność pomiędzy pierwszą
główną składową (PC1) a zmienną `gdp` na wykresie rozrzutu.

```{r}
plot(data$gdp, pca$x[, 1], pch = 19, xlab = "PKB", ylab = "PC1")
```

## Interpretacja

Najważniejszym krokiem jest zrozumienie, w jaki sposób interpretować otrzymane
wyniki. W tym celu będą pomocne dwa wykresy.

### Wykres piargowy

Wykres piargowy (*scree plot*) to wykres wyjaśnionej wariancji dla każdej
głównej składowej. Pomaga określić, ile głównych składowych należy zachować do
dalszej analizy. Punkt przegięcia, tzw. "łokieć" wykresu zazwyczaj wskazuje punkt,
w którym dodanie większej liczby składowych w niewielkim stopniu przyczynia się
do ogólnej wyjaśnionej wariancji. Aby go wyświetlić wystarczy użyć funkcji
`plot()` na obiekcie klasy `prcomp`.

```{r}
plot(pca, main = "Analiza głównych składowych", xlab = "Główna składowa")
abline(v = 3.7, lty = 2, col = "red")
```

Powyższy wykres sugeruje, że powinniśmy zachować pierwsze trzy główne składowe,
które wyjaśniają ponad 80% zmienności w danych. Dodanie czwartej głównej składowej
pozwoliłoby na wyjaśnienie ponad 90% zmienności. Pozostałe składowe reprezentują
mniejszą ilość informacji (zasadniczo jest to szum w danych).

### Biplot

Biplot to wykres punktowy przedstawiający rzutowane obserwacje na wybrane
główne składowe oraz strzałki reprezentujące ładunki oryginalnych zmiennych,
które tworzą pewne kąty. Jeśli wartość kąta pomiędzy strzałkami jest bliska:

- 0° to zmienne są silnie dodatnio skorelowane.
- 180° to zmienne są również silnie skorelowane, ale przeciwnie.
- 90° to zmienne są niezależne (ortogonalne).

Biplot można stworzyć używając funkcji `biplot()` na obiekcie klasy `prcomp`.
Argument `choices` pozwoli nam wybrać główne składowe.

```{r}
biplot(pca, choices = 1:2, cex = 0.6, xlabs = data$country)
```

W przypadku większych zbiorów danych, składających się z minimum kilkuset
obserwacji, odczytanie ich nazw nie będzie możliwe. W takiej sytuacji warto
zamienić etykiety nazw na kropki, ustawiając argument `xlabs = rep("·", nrow(data))`.
Alternatywnie, można całkowicie je pominąć i interpretować jedynie położenie
głównych składowych.

Niemniej, interpretacja głównych składowych jest skomplikowanym procesem. Z tego
powodu warto rozważyć najprostsze techniki redukcji wymiarowości oparte na usuwaniu
cechy o bliskiej zeru wariancji (mała zmienność to mało informacji) oraz cech,
które są ze sobą silnie skorelowane (np. korelacja powyżej 90%), aby zmniejszyć
redundancję danych.

# Analiza danych przestrzennych

```{r}
#| message: false
library("terra")
```

W tej sekcji zastosujemy redukcję wymiarowości do danych przestrzennych, a
wynik zaprezentujemy na mapie. Zacznijmy od wylistowania rastrów, które mamy
dostępne w katalogu `dane` używając funkcji `list.files()`. Doprecyzujmy, że
interesują nas wyłącznie pliki rastrowe z rozszerzeniem `.tif`.

```{r}
# listowanie plików w folderze
files = list.files("../dane/", pattern = "\\.tif$", full.names = TRUE)
files = files[1:3]
```

Następnie używając funkcji `rast()` możemy wczytać wybrane trzy warstwy jako
jeden raster wielokanałowy, tj. składający się z trzech warstw. Pamiętaj, żeby
stworzyć raster wielokanałowy, to poszczególne warstwy muszą posiadać tę samą
geometrię (liczba kolumn i wierszy), zakres przestrzenny oraz układ przestrzenny!

```{r}
# wczytanie rastrów
r = rast(files)
r
```

Wybrane rastry zostały wczytane jako obiekt `r`. Kolejne kroki analizy wykonamy
na mniejszej próbie losowej. Takie podejście stosuje się w przypadku przetwarzania
ogromnych zbiorów danych, ponieważ nie jest możliwe, aby wczytać je do pamięci
komputera. Do losowania próby służy funkcja `spatSample()`, w której możemy
zdefiniować jej wielkość oraz usuwanie brakujących wartości `NA`. Szczególnie
ważne jest zadbanie o powtarzalność analizy, więc koniecznie jest wcześniejsze
zdefiniowanie ziarna losowości `set.seed()`.

```{r}
# ziarno losowości
set.seed(1)
# losowanie próby
smp = spatSample(r, size = 5000, na.rm = TRUE, as.points = TRUE)
```

Teraz możemy wyświetlić wylosowane punkty na mapie.

```{r}
plot(r[[1]])
plot(smp, add = TRUE, cex = 0.4, col = "red")
```

Większość narzędzi czy modeli operuje na typowych strukturach danych takich jak
macierze czy ramki danych (niekoniecznie pliki rastrowe czy wektorowe). Z tego
powodu dokonamy konwersji punktów (klasa `SpatVector`) na ramkę danych
wykorzystując funkcję `as.data.frame()`.

```{r}
# konwersja punktów na ramkę danych
df_smp = as.data.frame(smp)
```

Następnie dane z próby należy zestandaryzować do wspólnej skali przy użyciu funkcji
`scale()`. Istotną czynnością jest zapisane współczynników centrowania i skalowania
z próby, ponieważ będzie trzeba je później zastosować dla całych rastrów (wszystkich
komórek).

```{r}
# standaryzacja próby
df_smp_scale = scale(df_smp, center = TRUE, scale = TRUE)
# współczynnik centrowania
v_center = attr(df_smp_scale, "scaled:center")
# współczynnik skalowania
v_scale = attr(df_smp_scale, "scaled:scale")
```

Po standaryzacji danych możemy obliczyć główne składowe za pomocą poznanej już
funkcji `prcomp()`.

```{r}
pca = prcomp(df_smp_scale, center = FALSE, scale. = FALSE)
```

Po wyznaczeniu głównych składowych, przechodzimy do najtrudniejszego etapu,
polegającego na ekstrapolacji wyliczonych głównych składowych z próby na cały
raster. Zasadniczo, tę procedurę przeprowadza się sekwencyjnie z podziałem na
mniejsze bloki rastra, jednakże nasze rastry są małe i możemy je wczytać całe
do pamięci.

Ponownie wykorzystajmy funkcję `as.data.frame()`, aby dokonać konwersji rastrów
(`SpatRaster`) do ramki danych. Ustawmy także argument `na.rm = FALSE` do zachowania
pustych wartości w rastrze. Następnie, kluczowym krokiem jest wyznaczenie indeksów
komórek, które posiadają wartości używając funkcji `complete.cases()`, ponieważ
będzie to niezbędne do wstawienia wartości w odpowiednie miejsca w wektorze.

```{r}
df = as.data.frame(r, na.rm = FALSE)
# indeksy komórek z wartościami
idx = complete.cases(df)
# usuń puste wartości
df = df[idx, ]
```

Tak jak wcześniej, standaryzujemy całe dane, z tą różnicą, iż definiujemy
uprzednio wyliczone współczynniki centrowania (`v_center`) i skalowania
(`v_scale`).

```{r}
# standaryzacja całego zbioru
df = scale(df, center = v_center, scale = v_scale)
```

Mamy już przygotowane dane, teraz możemy wykonać ekstrapolację używając
funkcji `predict()` i podając dwa wymagane argumenty. Pierwszy to obliczone
składowe główne w obiekcie `pca`, a drugi obiekt to ramka danych `df`.

```{r}
# PCA dla całego zbioru danych
pr = predict(pca, df)
```

Wynikiem powyższej predykcji jest macierz, w której w wierszach znajdują się
komórki rastra (blisko 80 tysięcy), a w kolumnach składowe główne. Zauważ, że
raster wejściowy składa się z 81 tysięcy komórek, natomiast z predykcji
otrzymaliśmy ich mniej, co spowodowane jest wykluczeniem brakujących wartości.
Rozwiązanie tego problemu jest proste. Należy wstawić wartości predykcji tylko
w tych komórkach, które posiadały wartości.

Stwórzmy zatem nowy wektor zawierający wyłącznie brakujące wartości `NA` o takiej
długości, ile raster posiada wszystkich komórek (270 * 300). Następnie używając
indeksów z obiektu `idx` przypiszemy wartości pierwszej głównej składowej do
wektora `vec` w odpowiednich miejscach.

```{r}
# stwórz pusty wektor
vec = rep(NA, ncell(r))
# przypisz wartości z PC1
vec[idx] = pr[, 1]
```

Następnie tworzymy nowy raster o nazwie `output` kopiując metadane z rastra `r`
oraz definiując jeden kanał i wartości na podstawie wektora `vec`.

```{r}
# stwórz nowy raster
output = rast(r, nlyrs = 1, vals = vec)
```

Finalnie, dokonajmy wizualizacji pierwszej głównej składowej (PC1) na mapie.

```{r}
plot(output, main = "Pierwsza składowa główna (PC1)")
```

# Zadanie

Dokonaj redukcji wymiarowości rastrów znajdujących się w katalogu `dane`
używając analizy głównych składowych i losowej próby. Wcześniej przygotuj zbiór
danych do analizy, tj. usuń brakujące i odstające wartości oraz spróbuj
transformować zmienne do rozkładu normalnego. Zaprezentuj pierwszą składową
na mapie oraz zinterpretuj, co ona przedstawia. Otrzymane wyniki i wnioski
przedstaw w formie raportu (Quarto lub Markdown) z wykresami oraz wyjaśnij,
dlaczego podjąłeś określone decyzje.
